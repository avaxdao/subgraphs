type Contract @entity {
  id: ID!
  asAccount: Account!
  name: String
  symbol: String
  totalOwners: BigInt!
  totalTokens: BigInt!
  tokens: [Token!]! @derivedFrom(field: "contract")
  totalTransfers: BigInt!
  transfers: [Transfer!]! @derivedFrom(field: "contract")
}
type Account @entity {
  id: ID!
  asContract: Contract
  tokens: [Token!]! @derivedFrom(field: "owner")
  totalTokens: BigInt!
  totalTokensMinted: BigInt!
  transferFrom: [Transfer!]! @derivedFrom(field: "from")
  transferTo: [Transfer!]! @derivedFrom(field: "to")
  events: [Event!]! @derivedFrom(field: "emitter")
}
type Token @entity {
  id: ID!
  identifier: BigInt!
  contract: Contract!
  createdAt: BigInt!
  minter: Account!
  owner: Account!
  uri: String
  totalTransfers: BigInt!
  transfers: [Transfer!]! @derivedFrom(field: "token")
}
type Transfer implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: Contract!
  token: Token!
  from: Account!
  to: Account!
}
interface Event {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
}
type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}
